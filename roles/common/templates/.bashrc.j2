# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

#------------------------------------------////
# Colors:
#------------------------------------------////
black='\\\\e[0;30m'
blue='\\\\e[0;34m'
green='\\\\e[0;32m'
cyan='\\\\e[0;36m'
red='\\\\e[0;31m'
purple='\\\\e[0;35m'
brown='\\\\e[0;33m'
lightgray='\\\\e[0;37m'
darkgray='\\\\e[1;30m'
lightblue='\\\\e[1;34m'
lightgreen='\\\\e[1;32m'
lightcyan='\\\\e[1;36m'
lightred='\\\\e[1;31m'
lightpurple='\\\\e[1;35m'
yellow='\\\\e[1;33m'
white='\\\\e[1;37m'
nc='\\\\e[0m'

# Sexy Solarized Bash Prompt, inspired by "Extravagant Zsh Prompt"
# Customized for the Solarized color scheme by Sean O'Neil

if [[ $COLORTERM = gnome-* && $TERM = xterm ]]  && infocmp gnome-256color >/dev/null 2>&1; then TERM=gnome-256color; fi
if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
      BASE03=$(tput setaf 234)
      BASE02=$(tput setaf 235)
      BASE01=$(tput setaf 240)
      BASE00=$(tput setaf 241)
      BASE0=$(tput setaf 244)
      BASE1=$(tput setaf 245)
      BASE2=$(tput setaf 254)
      BASE3=$(tput setaf 230)
      YELLOW=$(tput setaf 136)
      ORANGE=$(tput setaf 166)
      RED=$(tput setaf 160)
      MAGENTA=$(tput setaf 125)
      VIOLET=$(tput setaf 61)
      BLUE=$(tput setaf 33)
      CYAN=$(tput setaf 37)
      GREEN=$(tput setaf 64)
    else
      BASE03=$(tput setaf 8)
      BASE02=$(tput setaf 0)
      BASE01=$(tput setaf 10)
      BASE00=$(tput setaf 11)
      BASE0=$(tput setaf 12)
      BASE1=$(tput setaf 14)
      BASE2=$(tput setaf 7)
      BASE3=$(tput setaf 15)
      YELLOW=$(tput setaf 3)
      ORANGE=$(tput setaf 9)
      RED=$(tput setaf 1)
      MAGENTA=$(tput setaf 5)
      VIOLET=$(tput setaf 13)
      BLUE=$(tput setaf 4)
      CYAN=$(tput setaf 6)
      GREEN=$(tput setaf 2)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    # Linux console colors. I don't have the energy
    # to figure out the Solarized values
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
fi



#------------------------------------------////
# Finding platform
#------------------------------------------////
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Darwin' ]]; then
    platform='osx'
    rvm reload
fi


#----------------------------------------------
# Source extended bash configs
#----------------------------------------------

# Aliases
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Extended configs (functions, etc)
if [ -f ~/.bash_extended ]; then
    . ~/.bash_extended
fi

# Rackspace configs
if [ -f ~/.bash_rax ]; then
    . ~/.bash_rax
fi

if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi

if [ -f ~/.git-prompt.sh ]; then
    . ~/.git-prompt.sh
fi

if [ -f "$HOME/.tmuxifier/init.sh" ]; then  
    . "$HOME/.tmuxifier/init.sh"
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
{% if ansible_system == "Linux" %}
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi
{% endif %}
{% if ansible_distribution == "MacOSX" %}
if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
fi
{% endif %}
[[ $startup_cmd ]] && {
    declare +x startup_cmd
    eval "$startup_cmd"
}

#------------------------------------------////
# Virtual Env Wrapper Init
#------------------------------------------////
{% if ansible_distribution == "MacOSX" %}
VIRTUALENVWRAPPER_PYTHON=/usr/bin/python          
if [ -f ~/Library/Python/2.7/bin/virtualenvwrapper.sh ]; then
    . ~/Library/Python/2.7/bin/virtualenvwrapper.sh
fi
{% endif %}
{% if ansible_system == "Linux" %}
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    . /usr/local/bin/virtualenvwrapper.sh
fi
{% endif %}

#------------------------------------------////
# General Export variables
#------------------------------------------////
export LC_ALL=en_US.UTF-8
export WIRESHARK=/usr/include/wireshark/
export TERM=xterm-256color
export EDITOR="/usr/bin/vi"


#------------------------------------------////
# Set PATH
#------------------------------------------////
if [ -d /Users/ ]; then
    PATH=/Users/{{ username }}/Library/Python/2.7/bin:$PATH
fi

PATH=$PATH:~/bin
if [ -d "$HOME/.local/bin" ]; then
    PATH="$HOME/.local/bin:$PATH"
fi

#------------------------------------------////
# Powerline init
#------------------------------------------////
powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
#if [ -f ~/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh ]; then
#    source ~/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh
#fi


#------------------------------------------////
# Terminal prompt and welcome message:
#------------------------------------------////
PS1="\[${BOLD}${YELLOW}\]\u\[$BASE0\]@\[$CYAN\]\h \[$BASE0\]in \[$BLUE\]\w \$(parse_git_prompt)\[$RESET\]\n\$ \[$RESET\]"
clear
echo "Welcome to: $HOSTNAME"
dofiglet=true
command -v figlet >/dev/null 2>&1 || dofiglet=false
echo "User config loaded"
echo -ne "${RED}Today is: ${CYAN}" `date`; echo ""
#echo -e "${RED}Kernel Information: \t${CYAN}" `uname -smr`
#echo -ne "${CYAN}";upinfo;echo ""

export IBUS_ENABLE_SYNC_MODE=1